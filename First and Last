Problem
You are given an array A = [A_1, A_2, \ldots, A_N]A=[A 
1
​
 ,A 
2
​
 ,…,A 
N
​
 ] of length NN.

You can right rotate it any number of times (possibly, zero). What is the maximum value of A_1 + A_NA 
1
​
 +A 
N
​
  you can get?

Note: Right rotating the array [A_1, A_2, \ldots, A_N][A 
1
​
 ,A 
2
​
 ,…,A 
N
​
 ] once gives the array [A_N, A_1, A_2, \ldots, A_{N-1}][A 
N
​
 ,A 
1
​
 ,A 
2
​
 ,…,A 
N−1
​
 ]. For example, right rotating [1, 2, 3][1,2,3] once gives [3, 1, 2][3,1,2], and right rotating it again gives [2, 3, 1][2,3,1].

Input Format
The first line of input will contain a single integer TT, denoting the number of test cases. The description of the test cases follows.
The first line of each test case contains a single integer NN, denoting the length of array AA.
The second line of each test case contains NN space-separated integers A_1, A_2, \ldots, A_NA 
1
​
 ,A 
2
​
 ,…,A 
N
​
  — denoting the array AA.
Output Format
For each test case, output on a new line the maximum value of A_1+A_NA 
1
​
 +A 
N
​
  you can get after several right rotations.

Constraints
1 \leq T \leq 10001≤T≤1000
2 \leq N \leq 10^52≤N≤10 
5
 
1 \leq A_i \leq 10^91≤A 
i
​
 ≤10 
9
 
The sum of NN across all test cases does not exceed 10^510 
5
 
Sample 1:
Input
Output
3
2
5 8
3
5 10 15
4
4 4 4 4
13
25
8
Explanation:
Test case 11: Whether you right rotate the array or not, you will always end up with A_1+A_N = 13A 


Test case 22: It is optimal to right rotate the array once after which the array becomes [15,5,10][15,5,10] with A_1 + A_N = 25A 


Test case 33: No matter how much you right rotate the array, you will always obtain A_1 + A_N = 8A 






//////////////////////////////////////////////////////////////////////////////////
/* package codechef; // don't place package name! */

import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Codechef
{
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner sc= new Scanner(System.in);
		int t=sc.nextInt();
		for(int i=1;i<=t;i++){
		    int n=sc.nextInt();
		    int arr[]=new int[n];
		    for(int j=0;j<n;j++){
		        arr[j]=sc.nextInt();
		    }
		   if(n==2){
		       System.out.println(arr[0]+arr[1]);
		   } else if(n<=1){
		       System.out.println(arr[0]);
		   }
		   else{
		       int sum=arr[0]+arr[n-1];
		       int m=0;
		       for(int k=1;k<n;k++){
		           
		          if(arr[k]+arr[m]>sum){
		              sum=arr[k]+arr[m];
		              
		          }
		          m++;
		       }
		       System.out.println(sum);
		   }
		}
	}
}
